'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace EwEAutoUpdateRef
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UpdateServiceSoap", [Namespace]:="http://webservice.ecopath.org/EwEAutoUpdate.Web/")>  _
    Partial Public Class UpdateService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetPluginMigrationTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPluginUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadPluginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPluginHashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPluginExtensionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EwEPlugin.My.MySettings.Default.EwEPlugin_EwEAutoUpdateRef_UpdateService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetPluginMigrationTokenCompleted As GetPluginMigrationTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPluginUpdateCompleted As CheckPluginUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadPluginCompleted As DownloadPluginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPluginHashCompleted As GetPluginHashCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPluginExtensionCompleted As GetPluginExtensionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservice.ecopath.org/EwEAutoUpdate.Web/GetPluginMigrationToken", RequestNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", ResponseNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPluginMigrationToken(ByVal strCoreVersion As String, ByVal strPluginName As String, ByVal strPluginVersion As String) As String
            Dim results() As Object = Me.Invoke("GetPluginMigrationToken", New Object() {strCoreVersion, strPluginName, strPluginVersion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPluginMigrationTokenAsync(ByVal strCoreVersion As String, ByVal strPluginName As String, ByVal strPluginVersion As String)
            Me.GetPluginMigrationTokenAsync(strCoreVersion, strPluginName, strPluginVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPluginMigrationTokenAsync(ByVal strCoreVersion As String, ByVal strPluginName As String, ByVal strPluginVersion As String, ByVal userState As Object)
            If (Me.GetPluginMigrationTokenOperationCompleted Is Nothing) Then
                Me.GetPluginMigrationTokenOperationCompleted = AddressOf Me.OnGetPluginMigrationTokenOperationCompleted
            End If
            Me.InvokeAsync("GetPluginMigrationToken", New Object() {strCoreVersion, strPluginName, strPluginVersion}, Me.GetPluginMigrationTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPluginMigrationTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPluginMigrationTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPluginMigrationTokenCompleted(Me, New GetPluginMigrationTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservice.ecopath.org/EwEAutoUpdate.Web/CheckPluginUpdate", RequestNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", ResponseNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPluginUpdate(ByVal strCoreVersion As String, ByVal strPluginName As String, ByVal strPluginPKT As String, ByVal strPluginVersion As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckPluginUpdate", New Object() {strCoreVersion, strPluginName, strPluginPKT, strPluginVersion})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPluginUpdateAsync(ByVal strCoreVersion As String, ByVal strPluginName As String, ByVal strPluginPKT As String, ByVal strPluginVersion As String)
            Me.CheckPluginUpdateAsync(strCoreVersion, strPluginName, strPluginPKT, strPluginVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPluginUpdateAsync(ByVal strCoreVersion As String, ByVal strPluginName As String, ByVal strPluginPKT As String, ByVal strPluginVersion As String, ByVal userState As Object)
            If (Me.CheckPluginUpdateOperationCompleted Is Nothing) Then
                Me.CheckPluginUpdateOperationCompleted = AddressOf Me.OnCheckPluginUpdateOperationCompleted
            End If
            Me.InvokeAsync("CheckPluginUpdate", New Object() {strCoreVersion, strPluginName, strPluginPKT, strPluginVersion}, Me.CheckPluginUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPluginUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPluginUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPluginUpdateCompleted(Me, New CheckPluginUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservice.ecopath.org/EwEAutoUpdate.Web/DownloadPlugin", RequestNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", ResponseNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadPlugin() As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadPlugin", New Object(-1) {})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadPluginAsync()
            Me.DownloadPluginAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadPluginAsync(ByVal userState As Object)
            If (Me.DownloadPluginOperationCompleted Is Nothing) Then
                Me.DownloadPluginOperationCompleted = AddressOf Me.OnDownloadPluginOperationCompleted
            End If
            Me.InvokeAsync("DownloadPlugin", New Object(-1) {}, Me.DownloadPluginOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadPluginOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadPluginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadPluginCompleted(Me, New DownloadPluginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservice.ecopath.org/EwEAutoUpdate.Web/GetPluginHash", RequestNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", ResponseNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPluginHash() As String
            Dim results() As Object = Me.Invoke("GetPluginHash", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPluginHashAsync()
            Me.GetPluginHashAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPluginHashAsync(ByVal userState As Object)
            If (Me.GetPluginHashOperationCompleted Is Nothing) Then
                Me.GetPluginHashOperationCompleted = AddressOf Me.OnGetPluginHashOperationCompleted
            End If
            Me.InvokeAsync("GetPluginHash", New Object(-1) {}, Me.GetPluginHashOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPluginHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPluginHashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPluginHashCompleted(Me, New GetPluginHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservice.ecopath.org/EwEAutoUpdate.Web/GetPluginExtension", RequestNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", ResponseNamespace:="http://webservice.ecopath.org/EwEAutoUpdate.Web/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPluginExtension() As String
            Dim results() As Object = Me.Invoke("GetPluginExtension", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPluginExtensionAsync()
            Me.GetPluginExtensionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPluginExtensionAsync(ByVal userState As Object)
            If (Me.GetPluginExtensionOperationCompleted Is Nothing) Then
                Me.GetPluginExtensionOperationCompleted = AddressOf Me.OnGetPluginExtensionOperationCompleted
            End If
            Me.InvokeAsync("GetPluginExtension", New Object(-1) {}, Me.GetPluginExtensionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPluginExtensionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPluginExtensionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPluginExtensionCompleted(Me, New GetPluginExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetPluginMigrationTokenCompletedEventHandler(ByVal sender As Object, ByVal e As GetPluginMigrationTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPluginMigrationTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub CheckPluginUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPluginUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPluginUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub DownloadPluginCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadPluginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadPluginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetPluginHashCompletedEventHandler(ByVal sender As Object, ByVal e As GetPluginHashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPluginHashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetPluginExtensionCompletedEventHandler(ByVal sender As Object, ByVal e As GetPluginExtensionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPluginExtensionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
