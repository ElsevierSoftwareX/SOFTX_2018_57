' ===============================================================================
' This file is part of Ecopath with Ecosim (EwE)
'
' EwE is free software: you can redistribute it and/or modify it under the terms
' of the GNU General Public License version 2 as published by the Free Software 
' Foundation.
'
' EwE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
' without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
' PURPOSE. See the GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License along with EwE.
' If not, see <http://www.gnu.org/licenses/gpl-2.0.html>. 
'
' Copyright 1991- 
'    UBC Institute for the Oceans and Fisheries, Vancouver BC, Canada, and
'    Ecopath International Initiative, Barcelona, Spain
' ===============================================================================
'

' ===============================================================================
' This class is manually generated via Visual Studio tool wsdl.exe

' Inspired by http://dotnetslackers.com/Community/blogs/kaushalparik/archive/2010/05/14/how-to-call-invoke-a-web-service-without-adding-web-reference.aspx
' Partially converted to VB.NET via http://www.developerfusion.com/tools/convert/csharp-to-vb/?batchId=907793bb-a406-4afc-9004-4e8071ad335d
' Converted VB file contained errors in the event firing logic, which were fixed by hand
' ===============================================================================
Option Strict On

Namespace WebServices

    ''' <remarks>
    ''' This source code was auto-generated by wsdl, Version=4.0.30319.1.
    ''' </remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")>
    <System.Diagnostics.DebuggerStepThroughAttribute()>
    <System.ComponentModel.DesignerCategoryAttribute("code")>
    <System.Web.Services.WebServiceBindingAttribute(Name:="getResultBinding", [Namespace]:="http://ecobase.ecopath.org/php/webser/operation_1.wsdl")>
    Partial Public Class cEcoBaseWDSL
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private list_modelsOperationCompleted As System.Threading.SendOrPostCallback

        Private getModelOperationCompleted As System.Threading.SendOrPostCallback

        Private Upload_ModelOperationCompleted As System.Threading.SendOrPostCallback

        Public Sub New()
            Me.Url = "http://ecobase.ecopath.org/php/webser/soap-server.php"
        End Sub

        Public Event ListModelsCompleted As ListModelsCompletedEventHandler
        Public Event GetModelCompleted As GetModelCompletedEventHandler
        Public Event UploadModelCompleted As UploadModelCompletedEventHandler

        <System.Web.Services.Protocols.SoapRpcMethodAttribute("Upload_Model", RequestNamespace:="urn:sirs:getResult", ResponseNamespace:="urn:sirs:getResult")>
        Public Function Upload_Model(ByVal model_number As Integer, ByVal model_data As String) As <System.Xml.Serialization.SoapElementAttribute("result")> String
            Dim results() As Object = Me.Invoke("Upload_Model", New Object() {model_number, model_data})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginUpload_Model(ByVal model_number As Integer, ByVal model_data As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Upload_Model", New Object() {model_number, model_data}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndUpload_Model(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub Upload_ModelAsync(ByVal model_number As String, ByVal model_data As String)
            Me.Upload_ModelAsync(model_number, model_data, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Upload_ModelAsync(ByVal model_number As String, ByVal model_data As String, ByVal userState As Object)
            If (Me.Upload_ModelOperationCompleted Is Nothing) Then
                Me.Upload_ModelOperationCompleted = AddressOf Me.OnUpload_ModelOperationCompleted
            End If
            Me.InvokeAsync("Upload_Model", New Object() {model_number, model_data}, Me.Upload_ModelOperationCompleted, userState)
        End Sub

        Private Sub OnUpload_ModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadModelCompleted(Me, New Upload_ModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        <System.Web.Services.Protocols.SoapRpcMethodAttribute("list_models", RequestNamespace:="urn:sirs:getResult", ResponseNamespace:="urn:sirs:getResult")>
        Public Function list_models(operation As String, model_number As Integer) As <System.Xml.Serialization.SoapElementAttribute("result")> String
            Dim results As Object() = Me.Invoke("list_models", New Object() {operation, model_number})
            Return DirectCast(results(0), String)
        End Function

        Public Function Beginlist_models(operation As String, model_number As Integer, callback As System.AsyncCallback, asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("list_models", New Object() {operation, model_number}, callback, asyncState)
        End Function

        Public Function Endlist_models(asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return DirectCast(results(0), String)
        End Function

        Public Sub list_modelsAsync(operation As String, model_number As Integer)
            Me.list_modelsAsync(operation, model_number, Nothing)
        End Sub

        Public Sub list_modelsAsync(operation As String, model_number As Integer, userState As Object)
            If (Me.list_modelsOperationCompleted Is Nothing) Then
                Me.list_modelsOperationCompleted = New System.Threading.SendOrPostCallback(AddressOf Me.Onlist_modelsOperationCompleted)
            End If
            Me.InvokeAsync("list_models", New Object() {operation, model_number}, Me.list_modelsOperationCompleted, userState)
        End Sub

        Private Sub Onlist_modelsOperationCompleted(arg As Object)
            Try
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = DirectCast(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListModelsCompleted(Me, New list_modelsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            Catch ex As Exception
                ' Whoah
            End Try
        End Sub

        <System.Web.Services.Protocols.SoapRpcMethodAttribute("getModel", RequestNamespace:="urn:sirs:getResult", ResponseNamespace:="urn:sirs:getResult")>
        Public Function getModel(operation As String, model_number As Integer) As <System.Xml.Serialization.SoapElementAttribute("result")> String
            Dim results As Object() = Me.Invoke("getModel", New Object() {operation, model_number})
            Return DirectCast(results(0), String)
        End Function

        Public Function BegingetModel(operation As String, model_number As Integer, callback As System.AsyncCallback, asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getModel", New Object() {operation, model_number}, callback, asyncState)
        End Function

        Public Function EndgetModel(asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return DirectCast(results(0), String)
        End Function

        Public Sub getModelAsync(operation As String, model_number As Integer)
            Me.getModelAsync(operation, model_number, Nothing)
        End Sub

        Public Sub getModelAsync(operation As String, model_number As Integer, userState As Object)
            If (Me.getModelOperationCompleted Is Nothing) Then
                Me.getModelOperationCompleted = New System.Threading.SendOrPostCallback(AddressOf Me.OngetModelOperationCompleted)
            End If
            Me.InvokeAsync("getModel", New Object() {operation, model_number}, Me.getModelOperationCompleted, userState)
        End Sub

        Private Sub OngetModelOperationCompleted(arg As Object)
            Try
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = DirectCast(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelCompleted(Me, New getModelCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            Catch ex As Exception

            End Try
        End Sub

        Public Shadows Sub CancelAsync(userState As Object)
            MyBase.CancelAsync(userState)
        End Sub

    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub ListModelsCompletedEventHandler(sender As Object, e As list_modelsCompletedEventArgs)

    ''' <remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    <System.Diagnostics.DebuggerStepThroughAttribute()> _
    <System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class list_modelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results As Object()

        Friend Sub New(results As Object(), exception As System.Exception, cancelled As Boolean, userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return DirectCast(Me.results(0), String)
            End Get
        End Property
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub GetModelCompletedEventHandler(sender As Object, e As getModelCompletedEventArgs)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    <System.Diagnostics.DebuggerStepThroughAttribute()> _
    <System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class getModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results As Object()

        Friend Sub New(results As Object(), exception As System.Exception, cancelled As Boolean, userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return DirectCast(Me.results(0), String)
            End Get
        End Property

    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub UploadModelCompletedEventHandler(ByVal sender As Object, ByVal e As Upload_ModelCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class Upload_ModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

End Namespace ' WebServices
